define(['mcscript','files'],function(mcscript,files){
  function compile(){
    this.compiledFiles = [];
    //console.log(mcscript);
  }
  compile.prototype = {
    compile: function(files){
      this.compiledFiles = this.compileFiles(files);//got to return something that i can work with in an actual functional style.
      //now to do things with output. ohhhh boy. copy pasting project.
      var data = {}
      data["dir"] = this.compiledFiles[0].dir.split("/")[0];
      data["name"] = "pack.mcmeta"
      data["data"] = "{\"pack\": {\"pack_format\": 1,\"description\": \"generated by mcscriptStudio, a MCScript web-based application.\"}}"
      this.compiledFiles.push(data);


      window.running.interface.files.output = window.running.interface.files.treeFolders(this.compiledFiles);
    },
    //porting the mcscript forweb into here.
    compileFiles: function(rawFiles){
      //so this keeps the file tree, as that is important to the compilation.
      //the functions are in the folder for the functions. eg the projects is the datapack name
      //then the files in the parent dir are placed straight in functions.
      //ex: proj/data/proj/functions/STUFF.
      // console.log(file);
      var compiledFiles = []
      var editedFiles = []
      for(let file of rawFiles){
        var input = file.content.split("\n");
        for(let item of input){
          if(",;({[".indexOf(item.trim().slice(-1)) === -1){
            input[input.indexOf(item)] += ";";
          }
        }
        input = input.join("\n"); //from forWeb.js

        var ast = mcscript.parse(mcscript.TokenStream(mcscript.InputStream(input)));
        var data = mcscript.generate(ast,file.name);
        //let compiledFiles = [];
        if(file.name.endsWith('load.mcscript')){
          data = '#file: ./mcscript/load\n' + data;
        }
        let savedData = data;
        let extendArr = [];
        data = data.split("#file: ");
        for(let datChunk of data){
          let extended = datChunk.split("#extend: ");
          if(extended.length > 1){
            extendArr = extended.slice(1);
            data[data.indexOf(datChunk)] = extended[0];
          }
        }
        var directory = [file.dir];
        this.checkFilename(data,file.name,function(fileName,dat){
          //console.log(fileName);
          var fileNames = fileName.split('/');
          for(var i = 0; i<fileNames.length-1;i++){
            directory[0] += "/"+(fileNames[i]);
          }
          //console.log(fileName.split('/'));
          compiledFiles.push({dir: directory[0], name: fileNames[fileNames.length-1]  + '.mcfunction', data: dat.join("\n")});
        });
        this.checkFilename(extendArr,file.name,function(fileName,dat){
          dat =  "\n# Extended from "+file.name+" to "+ fileName + ".mcfunction\n" + dat.join("\n");
          editedFiles.push({dir: directory[0], name: fileName  + '.mcfunction', data: dat});
          // else {
          //   compiledFiles.push({dir: file.dir, name: fileName  + '.mcfunction', data: dat});
          // }
          //somehow test if there is a file that is generated by the end of the thing, and then add that on. FIXED!!! compile is a go!

        },true,directory);
      }
      for(let editdata of editedFiles){
        let editFiles = compiledFiles.find(function (obj) { if (obj.name === editdata.name && obj.dir === editdata.dir) return obj.name});
        if(editFiles) compiledFiles[compiledFiles.indexOf(editFiles)].data += "\n" + editdata.data;
        else {
          compiledFiles.push({dir: editdata.dir, name: editdata.name, data: editdata.data});
        }
      }
      return compiledFiles;
      //this compiles the files for the thing, this is very nice! modified from forWeb.js
      //prepped input text for compiling.
    },
    checkFilename: function(data,oldFile,then,ignoreSingle = false,directory=""){
      if(data.length > 1){
        data.forEach(dat => {
          if(dat != ""){
            dat = dat.split("\n")
            let file = dat[0].trim()
            if(file.substring(0,2) == "./") {
              file = oldFile.substring(0,oldFile.lastIndexOf('/') + 1) + file.substring(2,file.length)
            }
            if(file.substring(0,3) == "../") {
              let fileTree = file.split("../")
              let uri = directory[0].split("/")
              uri.splice(uri.length - (fileTree.length-1))
              directory[0] = uri.join("/");
              file = fileTree[fileTree.length-1];
            }
            dat.shift(0)
            then(file,dat)
          }
        })
      } else {
        let file = oldFile.replace(".mcscript","")
        if(!ignoreSingle) then(file,data)
      }
    }
  }
  return compile;
});
