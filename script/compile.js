define(['mcscript','files'],function(mcscript,files){
  function compile(){
    this.compiledFiles = [];
    //console.log(mcscript);
  }
  compile.prototype = {
    compile: function(files){
      this.compiledFiles = this.compileFiles(files);//got to return something that i can work with in an actual functional style.
      //now to do things with output. ohhhh boy. copy pasting project.
      
    },
    //porting the mcscript forweb into here.
    compileFiles: function(rawFiles){
      //so this keeps the file tree, as that is important to the compilation.
      //the functions are in the folder for the functions. eg the projects is the datapack name
      //then the files in the parent dir are placed straight in functions.
      //ex: proj/data/proj/functions/STUFF.
      // console.log(file);
      var compiledFiles = []
      var editedFiles = []
      for(let file of rawFiles){
        var input = file.content.split("\n");
        for(let item of input){
          if(",;({[".indexOf(item.trim().slice(-1)) === -1){
            input[input.indexOf(item)] += ";";
          }
        }
        input = input.join("\n"); //from forWeb.js

        var ast = mcscript.parse(mcscript.TokenStream(mcscript.InputStream(input)));
        var data = mcscript.generate(ast,file.name);
        //let compiledFiles = [];
        if(file.name.endsWith('load.mcscript')){
          data = '#file: ./mcscript/load\n' + data;
        }
        let savedData = data;
        let extendArr = [];
        data = data.split("#file: ");
        for(let datChunk of data){
          let extended = datChunk.split("#extend: ");
          if(extended.length > 1){
            extendArr = extended.slice(1);
            data[data.indexOf(datChunk)] = extended[0];
          }
        }
        mcscript.checkFilename(data,file.name,function(fileName,dat){
          compiledFiles.push({dir: file.dir, name: fileName  + '.mcfunction', data: dat.join("\n")});
        });
        extendArr.push("");
        mcscript.checkFilename(extendArr,file.name,function(fileName,dat){
          dat =  "\n# Extended from "+file.name+" to "+ fileName + ".mcfunction\n" + dat.join("\n");
          editedFiles.push({dir: file.dir, name: fileName  + '.mcfunction', data: dat});
          // else {
          //   compiledFiles.push({dir: file.dir, name: fileName  + '.mcfunction', data: dat});
          // }
          //somehow test if there is a file that is generated by the end of the thing, and then add that on. FIXED!!! compile is a go!

        },true);
      }
      for(let editdata of editedFiles){
        let editFiles = compiledFiles.find(function (obj) { if (obj.name === editdata.name && obj.dir === editdata.dir) return obj.name});
        if(editFiles) compiledFiles[compiledFiles.indexOf(editFiles)].data += "\n" + editdata.data;
        else {
          compiledFiles.push({dir: file.dir, name: fileName  + '.mcfunction', data: dat});
        }
      }
      return compiledFiles;
      //this compiles the files for the thing, this is very nice! modified from forWeb.js
      //prepped input text for compiling.
    }
  }
  return compile;
});
